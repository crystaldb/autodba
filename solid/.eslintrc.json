{
  "plugins": ["prettier", "@typescript-eslint", "import"],
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "settings": {
    "import/resolver": {
      "typescript": {
        "project": ["./tsconfig.json"]
      }
    }
  },
  "parser": "@typescript-eslint/parser",
  "extends": [
    "plugin:@typescript-eslint/strict-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "next/core-web-vitals",
    "prettier"
  ],
  "ignorePatterns": [
    "**/dist/*",
    "/docs/**",
    "/out/**",
    "/coverage/**",
    "**/jest.config.js",
    "**/next.config.js",
    "**/postcss.config.js",
    "**/tailwind.config.js"
  ],
  "rules": {
    "prettier/prettier": "error",
    "import/order": [
      "warn",
      {
        "groups": ["builtin", "external", "internal", ["parent", "sibling"]],
        "pathGroupsExcludedImportTypes": ["builtin"],
        "newlines-between": "never",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "import/no-empty-named-blocks": "error",
    "import/no-mutable-exports": "error",
    "import/no-cycle": "error",
    "import/extensions": [
      "warn",
      "always",
      {
        "ts": "never",
        "tsx": "never",
        "js": "never",
        "jsx": "never",
        "mjs": "never"
      }
    ],
    "import/newline-after-import": "warn",
    "import/no-anonymous-default-export": "warn",
    "import/no-default-export": "error",
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        "prefer": "type-imports",
        "fixStyle": "inline-type-imports",
        "disallowTypeAnnotations": false
      }
    ],
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": {
          "attributes": false
        }
      }
    ],
    "import/no-duplicates": [
      "error",
      {
        "prefer-inline": true
      }
    ],
    // false negatives
    "import/namespace": ["off"],
    "no-empty-pattern": "off",
    // make sure to `await` inside tryâ€¦catch
    "@typescript-eslint/return-await": ["error", "in-try-catch"],
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      { "ignoreArrowShorthand": true }
    ],
    // empty interfaces are fine, e.g. React component that extends other component, but with no additional props
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/array-type": [
      "warn",
      { "default": "array-simple", "readonly": "array-simple" }
    ],
    // allow unused vars prefixed with `_`
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }
    ],
    // numbers and booleans are fine in template strings
    "@typescript-eslint/restrict-template-expressions": [
      "error",
      { "allowNumber": true, "allowBoolean": true }
    ],
    "react/no-unescaped-entities": "off"
  },
  "overrides": [
    {
      "files": ["app/**/*.ts?(x)", "**/*.stories.ts?(x)"],
      "rules": {
        "import/no-default-export": "off"
      }
    }
  ]
}
